//
//  ListaAlumnosViewController.swift
//  Asistencia
//
//  Created by Fabrizio on 9/4/19.
//  Copyright (c) 2019 Fabrizio Valdivia. All rights reserved.
//
//  This file was generated by the StartApps CleanSwift Xcode Templates. V2.0
//  By Gabriel Lanata (http://StartApps.pe) with credit to http://clean-swift.com
//

import UIKit
import Firebase

class ListaAlumnosViewController: UIViewController, UITableViewDataSource, UITableViewDelegate, UISearchResultsUpdating {
    var interactor: ListaAlumnosInteractor!
    var router: ListaAlumnosRouter!
    var ref: DatabaseReference!

    // MARK: - Object variables

    // NOTE: Only store objects here if required
    private var displayedAlumnos: [ListaAlumnosScene.Alumnos.ViewModel.DisplayedAlumno] = []
    var filtered:[ListaAlumnosScene.Alumnos.ViewModel.DisplayedAlumno] = []
    var search = UISearchController(searchResultsController: nil)
    var goingForward:Bool = false
    var spinner = UIView()
    var canAddAttendee: Bool = false
    static var codigo: String? = nil
    var nombreA: String!
    var correoA: String!
    var idAlumno: String!
    var attendanceRaw = [String: Bool]()
    var attendeeType = [String]()
    var found = false
    
    // MARK: - Inteface objects

    @IBOutlet private weak var tableView: UITableView!
    @IBOutlet weak var addButton: UIButton!
    
    
    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        doAlumnos()
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        self.definesPresentationContext = true
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        if !goingForward {
            let alert = UIAlertController(title: "Aviso", message: "Desea salir del evento.", preferredStyle: .alert)

            alert.addAction(UIAlertAction(title: "Si", style: .default, handler: nil))
            alert.addAction(UIAlertAction(title: "No", style: .cancel, handler: nil))
            self.present(alert, animated: true)
        }
    }
    
    override func viewDidAppear(_ animated: Bool) {
        self.definesPresentationContext = true
        
        
        //TODO
        if let cod = ListaAlumnosViewController.codigo {
            for alumno in displayedAlumnos {
                if alumno.dni == cod {
                    nombreA = alumno.name
                    correoA = alumno.email
                    idAlumno = alumno.id
                    attendanceRaw = alumno.attendance
                    found = true
                }
            }
            if found {
                router.navigateToCompletion(nombreA: nombreA!, correoA: correoA!, id: self.interactor.id!, fechas: self.interactor.fechas, idAlumno: idAlumno, attendanceRaw: attendanceRaw)
            } else {
                router.navigateToNotFound()
            }
            ListaAlumnosViewController.codigo = nil
            found = false
            doAlumnos()
        }
    }
    
    func setupView() {
        // NOTE: Setup the view on load
        // somethingLabel.textColor = UIColor.blue
        setupNavigationController()
        search.searchResultsUpdater = self
        search.obscuresBackgroundDuringPresentation = false
        search.searchBar.placeholder = " Search..."
        self.search.hidesNavigationBarDuringPresentation = true
        tableView.tableHeaderView = search.searchBar
        
        addButton.layer.cornerRadius = addButton.frame.size.width/2
        addButton.backgroundColor = .orange
        addButton.imageEdgeInsets = UIEdgeInsets(top: 10,left: 10,bottom: 10,right: 10)
        
        if canAddAttendee {
            addButton.isHidden = false
        } else {
            addButton.isHidden = true
        }
    }
    
    func setupNavigationController() {
//        self.title = "Control de Asistencia \(title)"
        navigationController?.navigationBar.barTintColor = .orange
        navigationController?.navigationBar.tintColor = .white
        navigationController?.navigationBar.barStyle = .black
        navigationController?.navigationBar.titleTextAttributes = [NSAttributedString.Key.foregroundColor: UIColor.white]
        navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "QR")?.resizeImageWith(newSize: CGSize(width: 30, height: 30)), style: .plain, target: self, action: #selector(QRCode(_:)))
    }

    @objc func QRCode(_ sender: Any){
        router.navigateToScanner()
        ListaAlumnosViewController.codigo = nil

    }
    
    @IBAction func addAlumno(_ sender: UIButton) {
        router.navigateToAdd(id: self.interactor.id, fechas: self.interactor.fechas, count: displayedAlumnos.count, attendeeType: attendeeType)
    }
    
    
    // MARK: - Interaction handling

    // @IBAction func buttonPressed() { ...

    // MARK: - Event handling

    func doAlumnos() {
        // NOTE: Ask the Interactor to do some work
        // NOTE: Start loading animation here
        spinner = UIViewController.displaySpinner(onView: self.view)
        interactor.doAlumnos(request: ListaAlumnosScene.Alumnos.Request())
    }

    // MARK: - Display logic

    func displayAlumnos(viewModel: ListaAlumnosScene.Alumnos.ViewModel) {
        // NOTE: Display the result from the Presenter
        // NOTE: Stop loading animation here
        UIViewController.removeSpinner(spinner: spinner)
        displayedAlumnos = viewModel.displayedAlumnos
        filtered = displayedAlumnos
        tableView.reloadData()
    }
    
    func displayAlertError(viewModel: ListaAlumnosScene.AlertError.ViewModel) {
        // NOTE: Stop loading animation here
        let alert = UIAlertController(title: "Error", message: viewModel.message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .cancel, handler: nil))
        present(alert, animated: true, completion: nil)
    }

    // MARK: - TableView DataSource Methods

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        //return displayedAlumnos.count
        if self.search.isActive {
            if filtered.count > 0 {
                self.tableView.backgroundView = .none
                self.tableView.separatorStyle = .singleLine
                return filtered.count
            } else if filtered.count == 0 {
                self.tableView.backgroundView = .none
                self.tableView.separatorStyle = .singleLine
                return filtered.count
            } else {
                TableViewHelper.EmptyMessage(message: "No se encuentran asistentes.", viewController: self)
                return filtered.count
            }
        } else {
            self.tableView.backgroundView = .none
            self.tableView.separatorStyle = .singleLine
            return displayedAlumnos.count
        }
    }
    
    func setEmpty(label: UILabel) {
        self.tableView.backgroundView = label
        self.tableView.separatorStyle = .none
    }

    //Presentar todo en la tabla
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displayedAlumno = displayedAlumnos[indexPath.row]
        let cell = tableView.dequeueReusableCell(withIdentifier: ListaAlumnosTableViewCell.identifier, for: indexPath) as! ListaAlumnosTableViewCell
        let fechasEvento = self.interactor.fechas
        cell.nombreLabel.text = displayedAlumno.name
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd"
        let month = Calendar.current.component(.month, from: Date())
        let year = Calendar.current.component(.year, from: Date())
        let day = Calendar.current.component(.day, from: Date())
        let currentDate = dateFormatter.date(from: "\(year)-\(month)-\(day)")
        for dates in fechasEvento {
            let dateArr = String(describing: dates)
            let dateA = dateArr.components(separatedBy: " ")
            let dateF = dateA[1]
            let dateFinal = dateF.components(separatedBy: "\"")
            let fechaE = dateFormatter.date(from: String(describing: dateFinal[1]))
            if fechaE! == currentDate! {
                
                if displayedAlumno.attendance["\(dateFinal[1])"] == true {
                    cell.checkImage.isHidden = false
                } else {
                    cell.checkImage.isHidden = true
                }
            }
        }
        
        if self.search.isActive {
            cell.nombreLabel.text = filtered[indexPath.row].name
        } else {
            cell.nombreLabel.text = displayedAlumno.name
        }
        return cell
    }
    
    //Registrar un Alumno
    func tableView(_ tableView: UITableView, editActionsForRowAt indexPath: IndexPath) -> [UITableViewRowAction]? {
        let checkAlumno = UITableViewRowAction(style: .normal, title: "Registrar") { (action, indexPath) in
            var id:String = " "
            if self.search.isActive {
               tableView.deselectRow(at: indexPath, animated: true)
                id = self.filtered[indexPath.row].id
                self.ref = Database.database().reference()
                let idEvento = self.interactor.id!
                let fechasEvento = self.interactor.fechas
                
                let dateFormatter = DateFormatter()
                dateFormatter.dateFormat = "yyyy-MM-dd"
                let month = Calendar.current.component(.month, from: Date())
                let year = Calendar.current.component(.year, from: Date())
                let day = Calendar.current.component(.day, from: Date())
                let currentDate = dateFormatter.date(from: "\(year)-\(month)-\(day)")
                let currentDateRaw = String(describing: currentDate)
                let currentDateA = currentDateRaw.components(separatedBy: "(")
                let currentDateF = currentDateA[1].components(separatedBy: " ")
                let currDate = currentDateF[0]
                let fecha = fechasEvento.contains(EventDate(date: "\(currDate)"))
                if fecha {
                    for dates in fechasEvento {
                        let dateArr = String(describing: dates)
                        let dateA = dateArr.components(separatedBy: " ")
                        let dateF = dateA[1]
                        let dateFinal = dateF.components(separatedBy: "\"")
                        let fechaE = dateFormatter.date(from: String(describing: dateFinal[1]))
                        if fechaE == currentDate {
                            let fechaEv = String(describing: fechaE)
                            let fechaArr = fechaEv.components(separatedBy: "(")
                            let fechaF = fechaArr[1].components(separatedBy: " ")
                            let date = fechaF[0]
                            if self.filtered[indexPath.row].attendance[date] == true {
                                self.ref.child("events").child(String(idEvento)).child(id).child("extras").child("attendance").child(String(describing: date)).setValue(false)
                                self.filtered[indexPath.row].attendance[date] = false
                            } else {
                                self.ref.child("events").child(String(idEvento)).child(id).child("extras").child("attendance").child(String(describing: date)).setValue(true)
                                self.filtered[indexPath.row].attendance[date] = true
                            }
                        }
                    }
                    
                } else {
                    DispatchQueue.main.async {
                        let alert = UIAlertController(title: "Aviso", message: "No es dia del evento.", preferredStyle: .alert)
                        
                        alert.addAction(UIAlertAction(title: "OK", style: .cancel, handler: nil))
                        self.present(alert, animated: true)
                    }
                }
            }
            
            if !self.search.isActive {
               tableView.deselectRow(at: indexPath, animated: true)
                id = self.displayedAlumnos[indexPath.row].id
                self.ref = Database.database().reference()
                let idEvento = self.interactor.id!
                let fechasEvento = self.interactor.fechas
                
                let dateFormatter = DateFormatter()
                dateFormatter.dateFormat = "yyyy-MM-dd"
                let month = Calendar.current.component(.month, from: Date())
                let year = Calendar.current.component(.year, from: Date())
                let day = Calendar.current.component(.day, from: Date())
                let currentDate = dateFormatter.date(from: "\(year)-\(month)-\(day)")
                let currentDateRaw = String(describing: currentDate)
                let currentDateA = currentDateRaw.components(separatedBy: "(")
                let currentDateF = currentDateA[1].components(separatedBy: " ")
                let currDate = currentDateF[0]
                let fecha = fechasEvento.contains(EventDate(date: "\(currDate)"))
                if fecha {
                    for dates in fechasEvento {
                        let dateArr = String(describing: dates)
                        let dateA = dateArr.components(separatedBy: " ")
                        let dateF = dateA[1]
                        let dateFinal = dateF.components(separatedBy: "\"")
                        let fechaE = dateFormatter.date(from: String(describing: dateFinal[1]))
                        if fechaE! == currentDate! {
                            let fechaEv = String(describing: fechaE)
                            let fechaArr = fechaEv.components(separatedBy: "(")
                            let fechaF = fechaArr[1].components(separatedBy: " ")
                            let date = fechaF[0]
                            if self.displayedAlumnos[indexPath.row].attendance[date] == true {
                                self.ref.child("events").child(String(idEvento)).child(id).child("extras").child("attendance").child("\(date)").setValue(false)
                            } else if self.displayedAlumnos[indexPath.row].attendance[date] == false {
                                self.ref.child("events").child(String(idEvento)).child(id).child("extras").child("attendance").child("\(date)").setValue(true)
                            } else {
                                self.ref.child("events").child(String(idEvento)).child(id).child("extras").child("attendance").child("\(date)").setValue(true)
                            }
                        }
                    }
                } else {
                    DispatchQueue.main.async {
                        let alert = UIAlertController(title: "Aviso", message: "No es dia del evento.", preferredStyle: .alert)
                        
                        alert.addAction(UIAlertAction(title: "OK", style: .cancel, handler: nil))
                        self.present(alert, animated: true)
                    }
                }
            }
            
            self.doAlumnos()
        }
        return [checkAlumno]
    }
    
    func updateSearchResults(for searchController: UISearchController) {
        guard let text = search.searchBar.text else { return }
        
        filtered = displayedAlumnos.filter({$0.name.localizedCaseInsensitiveContains(text)})
        self.tableView.reloadData()
    }
    
//    func verificarAlumno() {
//        let idEvento = self.interactor.id!
//        let fechasEvento = self.interactor.fechas
//
//        let dateFormatter = DateFormatter()
//        dateFormatter.dateFormat = "yyyy-MM-dd"
//        let month = Calendar.current.component(.month, from: Date())
//        let year = Calendar.current.component(.year, from: Date())
//        let day = Calendar.current.component(.day, from: Date())
//        let currentDate = dateFormatter.date(from: "\(year)-\(month)-\(day)")
//        let currentDateRaw = String(describing: currentDate)
//        let currentDateA = currentDateRaw.components(separatedBy: "(")
//        let currentDateF = currentDateA[1].components(separatedBy: " ")
//        let currDate = currentDateF[0]
//        let fecha = fechasEvento.contains(EventDate(date: "\(currDate)"))
//        var i = 0
//        if fecha {
//            for dates in fechasEvento {
//                let dateArr = String(describing: dates)
//                let dateA = dateArr.components(separatedBy: " ")
//                let dateF = dateA[1]
//                let dateFinal = dateF.components(separatedBy: "\"")
//                let fechaE = dateFormatter.date(from: String(describing: dateFinal[1]))
//                if fechaE == currentDate {
//                    let fechaEv = String(describing: fechaE)
//                    let fechaArr = fechaEv.components(separatedBy: "(")
//                    let fechaF = fechaArr[1].components(separatedBy: " ")
//                    let date = fechaF[0]
//                    var j = 1
//                    for alumnos in displayedAlumnos {
//                        if alumnos.id == ListaAlumnosViewController.codigo {
//                            self.ref.child("events").child(String(idEvento)).child("\(j)").child("extras").child("attendance").child(String(describing: date)).setValue(false)
//                            router.navigateToCompletion()
//                        } else {
//                            self.ref.child("events").child(String(idEvento)).child("\(j)").child("extras").child("attendance").child(String(describing: date)).setValue(true)
//                            router.navigateToCompletion()
//                        }
//                        j += 1
//                    }
//                } else {
//                    i += 1
//                }
//            }
//        }
//    }
    
    // MARK: - TableView Delegate Methods

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if self.search.isActive {
            tableView.deselectRow(at: indexPath, animated: true)
            let nombre = filtered[indexPath.row].name
            let correo = filtered[indexPath.row].email
            let telefono = filtered[indexPath.row].phone
            goingForward = true
            router.navigateToSomewhere(nombre: nombre, correo: correo, telefono: telefono)
        } else {
            tableView.deselectRow(at: indexPath, animated: true)
            let nombre = displayedAlumnos[indexPath.row].name
            let correo = displayedAlumnos[indexPath.row].email
            let telefono = displayedAlumnos[indexPath.row].phone
            goingForward = true
            router.navigateToSomewhere(nombre: nombre, correo: correo, telefono: telefono)
        }
    }
}
