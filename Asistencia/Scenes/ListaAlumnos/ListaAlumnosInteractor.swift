//
//  ListaAlumnosInteractor.swift
//  Asistencia
//
//  Created by Fabrizio on 9/4/19.
//  Copyright (c) 2019 Fabrizio Valdivia. All rights reserved.
//
//  This file was generated by the StartApps CleanSwift Xcode Templates. V2.0
//  By Gabriel Lanata (http://StartApps.pe) with credit to http://clean-swift.com
//

import Foundation
import Firebase

class ListaAlumnosInteractor {

    var presenter: ListaAlumnosPresenter?

    // MARK: - Object variables
    
    var ref: DatabaseReference!
    var id: Int!
    var fechas = [EventDate]()
    
    // var loadAction: loadAction!

    // MARK: - Business logic

    func doAlumnos(request: ListaAlumnosScene.Alumnos.Request) {
        // NOTE: Pass the result to the Presenter
        ref = Database.database().reference()
        var alumnosArray = [Alumno]()

        ref.child("events").child(String(id)).observeSingleEvent(of: .value, with: { (snapshot) in
            // Get user value
            for rest in snapshot.children.allObjects as! [DataSnapshot] {
                let value = rest.value as? NSDictionary
                let name = value?["name"] as? String ?? ""
                let id = rest.key
                let dni = value?["id"] as? String ?? ""
                let extrasRaw = value?["extras"] as? NSDictionary
                var attendance = [String:Bool]()
                if let attendanceRaw = extrasRaw?["attendance"] as? [String: Bool] {
                    attendance = attendanceRaw
                }

                let attendeeType = extrasRaw?["attendeeType"] as? String ?? ""
                let email = extrasRaw?["email"] as? String ?? ""
                let phone = extrasRaw?["phone"] as? String ?? ""
                let extras = Extras(attendance: attendance, attendeeType: attendeeType, email: email, phone: phone)
                
                let alumno = Alumno(name: name, id: id, dni: dni, extras: [extras])
                alumnosArray.append(alumno)
            }
            DispatchQueue.main.async {
                
                self.presenter?.presentAlumnos(response: ListaAlumnosScene.Alumnos.Response(alumnos: alumnosArray))
            }

        }) { (error) in
            self.presenter?.presentAlertError(response: ListaAlumnosScene.AlertError.Response(error: error))
        }
    }

}
