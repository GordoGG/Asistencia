//
//  EventosInteractor.swift
//  Asistencia
//
//  Created by Fabrizio on 9/4/19.
//  Copyright (c) 2019 Fabrizio Valdivia. All rights reserved.
//
//  This file was generated by the StartApps CleanSwift Xcode Templates. V2.0
//  By Gabriel Lanata (http://StartApps.pe) with credit to http://clean-swift.com
//

import Foundation
import Firebase

class EventosInteractor {

    var presenter: EventosPresenter?

    // MARK: - Object variables
    
    var ref: DatabaseReference!
    

    // var loadAction: loadAction!

    // MARK: - Business logic

    func doEventos(request: EventosScene.Eventos.Request) {
        // NOTE: Pass the result to the Presenter
        ref = Database.database().reference()
        var eventsArray = [Evento]()
        var datesArray = [EventDate]()
        var attendeeType = [String]()
//        var eventDatesArray = [EventDate]()
        
        ref.child("settings").observeSingleEvent(of: .value, with: { (snapshot) in
            // Get user value
            
            for rest in snapshot.children.allObjects as! [DataSnapshot] {
//                print(rest.value)
                let value = rest.value as? NSDictionary
                let color = value?["color"] as? String ?? ""
                let dateHidden = value?["dateHidden"] as? String ?? ""
                let id = value?["id"] as! Int
                let canAddAttendee = value?["canAddAttendee"] as! Bool
                let image = value?["image"] as? String ?? ""
                let name = value?["name"] as? String ?? ""
                if let attendeeTypeRaw = value?["attendeeTypes"] as? [String] {
                    for attendeeTypes in attendeeTypeRaw {
                        attendeeType.append(attendeeTypes)
                    }
                }
                let datesRaw = value?["dates"] as! [String]
                for dateRaw in datesRaw {
                    let date = EventDate(date: dateRaw)
                    datesArray.append(date)
                }
                let event = Evento(color: color, dateHidden: dateHidden, id: id, image: image, name: name, canAddAttendee: canAddAttendee, dates: datesArray, attendeeType: attendeeType)
                eventsArray.append(event)
                datesArray = []
                attendeeType = []
            }
            self.presenter?.presentEventos(response: EventosScene.Eventos.Response(events: eventsArray))
//            let value = snapshot.value as? NSDictionary
//            let color = value?["color"] as? String ?? ""let attendeeType: [String]
//            let dateHidden = value?["dateHidden"] as? String ?? ""
//            let id = value?["id"] as! Int
//            let image = value?["image"] as? String ?? ""
//            let name = value?["name"] as? String ?? ""
//
//            let event = Evento(color: color, dateHidden: dateHidden, id: id, image: image, name: name)
//            print(event)
//            let user = User(username: username)
            
            // ...
        }) { (error) in
//            print(error.localizedDescription)
            self.presenter?.presentAlertError(response: EventosScene.AlertError.Response(error: error))
        }
    }
}
