//
//  EventosViewController.swift
//  Asistencia
//
//  Created by Fabrizio on 9/4/19.
//  Copyright (c) 2019 Fabrizio Valdivia. All rights reserved.
//
//  This file was generated by the StartApps CleanSwift Xcode Templates. V2.0
//  By Gabriel Lanata (http://StartApps.pe) with credit to http://clean-swift.com
//

import UIKit
import Kingfisher

class EventosViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate {

    var interactor: EventosInteractor!
    var router: EventosRouter!

    // MARK: - Object variables
    let refreshControl = UIRefreshControl()
    var spinner = UIView()
    // NOTE: Only store objects here if required
    private var displayedEvents: [EventosScene.Eventos.ViewModel.DisplayedEvent] = []

    // MARK: - Inteface objects

    @IBOutlet private weak var collectionView: UICollectionView!
//    @IBOutlet private weak var nameLabel: UILabel!

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        doEventos()
    }

    func setupView() {
        // NOTE: Setup the view on load
        // somethingLabel.textColor = UIColor.blue
        setupNavigationController()
//        if #available(iOS 11.0, *) {
//            self.navigationController?.navigationBar.prefersLargeTitles = true
//        } else {
//            // Fallback on earlier versions
//        }
        if #available(iOS 10.0, *) {
            collectionView.refreshControl = refreshControl
        } else {
            collectionView.addSubview(refreshControl)
        }
        
        refreshControl.tintColor = .white
        refreshControl.addTarget(self, action: #selector(refreshEventos(_:)), for: .valueChanged)
        refreshControl.attributedTitle = NSAttributedString(string: "", attributes: nil)
        
        setupCollectionView()
    }
    
    func setupNavigationController() {
        self.title = "Control de Asistencia UL"
        navigationController?.navigationBar.barTintColor = .orange
        navigationController?.navigationBar.tintColor = .white
        navigationController?.navigationBar.barStyle = .black
//        navigationController?.navigationBar.titleTextAttributes = [NSAttributedString.Key.foregroundColor: UIColor.white]
    }
    
    func setupCollectionView() {
        let width = (view.frame.size.width - 30) / 2
        let height = width * 1
        let cellSize = CGSize(width: width, height: height)

        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        layout.itemSize = cellSize
        layout.sectionInset = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)
        layout.minimumLineSpacing = 10.0
        layout.minimumInteritemSpacing = 10.0
        collectionView.setCollectionViewLayout(layout, animated: true)
    }

    @objc private func refreshEventos(_ sender: Any){
        doEventos()
    }
    
    // MARK: - Interaction handling

    // @IBAction func buttonPressed() { ...

    // MARK: - Event handling

    func doEventos() {
        // NOTE: Ask the Interactor to do some work
        // NOTE: Start loading animation here
        spinner = UIViewController.displaySpinner(onView: self.view)
        interactor.doEventos(request: EventosScene.Eventos.Request())
    }

    // MARK: - Display logic

    func displayEventos(viewModel: EventosScene.Eventos.ViewModel) {
        // NOTE: Display the result from the Presenter
        // NOTE: Stop loading animation here
        self.refreshControl.endRefreshing()
        UIViewController.removeSpinner(spinner: spinner)
        displayedEvents = viewModel.displayedEvents
        collectionView.reloadData()
    }
    
    func displayAlertError(viewModel: EventosScene.AlertError.ViewModel) {
        // NOTE: Stop loading animation here
        let alert = UIAlertController(title: "Error", message: viewModel.message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .cancel, handler: nil))
        present(alert, animated: true, completion: nil)
    }

    // MARK: - CollectionView DataSource Methods

    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return displayedEvents.count
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let displayedEvent = displayedEvents[indexPath.row]
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: EventosCollectionViewCell.identifier, for: indexPath) as! EventosCollectionViewCell
        cell.nameLabel.text = displayedEvent.name
        let url = URL(string: displayedEvent.image)
        cell.imageView.kf.setImage(with: url)
        let colorCell = Hexadecimal.hexaStringToUIColor(hex: displayedEvent.color)
        cell.contentainerView.backgroundColor = colorCell
        return cell
    }

    // MARK: - CollectionView Delegate Methods

    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        collectionView.deselectItem(at: indexPath, animated: true)
        let id = displayedEvents[indexPath.row].id
        let fechas = displayedEvents[indexPath.row].dates
        let title = displayedEvents[indexPath.row].name
        let canAddAttendee = displayedEvents[indexPath.row].canAddAttendee
        let attendeeType = displayedEvents[indexPath.row].attendeeType
        router.navigateToSomewhere(id: id, fechas: fechas, title: title, add: canAddAttendee, attendeeType: attendeeType)
    }
}
